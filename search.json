[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johan Asplund. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Asplund J (2025). metadataTools: Helpers Document Data Render Metadata Tables. R package version 0.1.0.","code":"@Manual{,   title = {metadataTools: Helpers to Document Data and Render Metadata Tables},   author = {Johan Asplund},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"metadatatools","dir":"","previous_headings":"","what":"Helpers to Document Data and Render Metadata Tables","title":"Helpers to Document Data and Render Metadata Tables","text":"metadataTools R package designed simplify process documenting datasets structured metadata. provides tools : Annotate data frames variable-level descriptions units Generate human-readable README files data repositories (e.g., DataverseNO) Document validate naming conventions datasets","code":""},{"path":[]},{"path":"/index.html","id":"id_-add-metadata-to-columns","dir":"","previous_headings":"Features","what":"📝 Add Metadata to Columns","title":"Helpers to Document Data and Render Metadata Tables","text":"add_desc() – Adds \"description\" attribute columns. description contains square brackets (e.g., \"Length [cm]\"), content inside brackets stored \"unit\" attribute. add_unit() – Adds \"unit\" attribute columns directly. Use attr(df, \"description\") describe dataset whole.","code":""},{"path":"/index.html","id":"id_-generate-readme-files","dir":"","previous_headings":"Features","what":"📄 Generate README Files","title":"Helpers to Document Data and Render Metadata Tables","text":"Dataset title, DOI, contact info Dataset description methodology File- variable-level metadata set_metadata_defaults() lets store default metadata values (e.g., name, institution, email, ORCID) used create_readme() streamline README generation. Compatible DataverseNO metadata schema.","code":""},{"path":"/index.html","id":"id_-create-metadata-tables","dir":"","previous_headings":"Features","what":"📊 Create Metadata Tables","title":"Helpers to Document Data and Render Metadata Tables","text":"create_metadata_table() builds formatted flextable summarizing variable names, types, units, descriptions.","code":""},{"path":"/index.html","id":"id_-validate-projects-naming-conventions","dir":"","previous_headings":"Features","what":"✅ Validate Projects’ Naming Conventions","title":"Helpers to Document Data and Render Metadata Tables","text":"validate_naming_convention() checks whether dataset contains mandatory variables valid entries defined project’s naming convention (e.g., EcoForest_naming). also adds standardized variable descriptions dataset. view_naming_convention() prints human-readable overview naming convention.","code":""},{"path":"/index.html","id":"id_-installation","dir":"","previous_headings":"","what":"🔧 Installation","title":"Helpers to Document Data and Render Metadata Tables","text":"can install development version metadataTools directly GitHub using remotes package:","code":"# Install remotes if not already installed install.packages(\"remotes\")  # Install metadataTools from GitHub remotes::install_github(\"asplundj/metadataTools\")"},{"path":"/reference/EcoForest_naming.html","id":null,"dir":"Reference","previous_headings":"","what":"EcoForest_naming — EcoForest_naming","title":"EcoForest_naming — EcoForest_naming","text":"Naming conventions EcoForest used metadataTools package.","code":""},{"path":"/reference/EcoForest_naming.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EcoForest_naming — EcoForest_naming","text":"","code":"EcoForest_naming"},{"path":"/reference/EcoForest_naming.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EcoForest_naming — EcoForest_naming","text":"tibble 8 rows 5 columns: name Variable name (e.g., \"Site_ID\", \"Plot_ID\") mandatory Logical indicating whether variable required valid_values List allowed values variable, NULL unrestricted default_description Text description variable's meaning format comment Optional comments addition description","code":""},{"path":"/reference/EcoForest_naming.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"EcoForest_naming — EcoForest_naming","text":"dataset defines naming conventions data used EcoForest project. includes metadata standard EcoForest variables, whether mandatory, values valid, default descriptions. intended used functions like validate_naming_convention(), checks mandatory variables included, contain valid values, attaches descriptions standard variables.","code":""},{"path":"/reference/EcoForest_naming.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EcoForest_naming — EcoForest_naming","text":"","code":"# Flextable of naming convention view_naming_convention(EcoForest_naming) #> Error in naming_object %>% dplyr::mutate(valid_values = sapply(valid_values,     format_valid), mandatory = ifelse(mandatory, \"Yes\", \"No\")) %>%     flextable::flextable() %>% flextable::fontsize(size = 8,     part = \"all\") %>% flextable::width(j = \"valid_values\", width = 3) %>%     flextable::set_table_properties(layout = \"autofit\"): could not find function \"%>%\"   # Create a dataset that matches the naming convention df1 <- data.frame(   Site_ID = rep(c(\"BLA\", \"BRA\", \"GUL\", \"HAL\", \"HEM\", \"LAN\", \"MRK\", \"OYT\", \"SAR\", \"SKO\", \"STR\", \"TRE\"), each = 2),   Forest_Type = rep(c(\"CC\", \"NN\"), times = 12) ) %>%   dplyr::mutate(Plot_ID = paste(Site_ID, Forest_Type, sep = \"_\")) #> Error in data.frame(Site_ID = rep(c(\"BLA\", \"BRA\", \"GUL\", \"HAL\", \"HEM\",     \"LAN\", \"MRK\", \"OYT\", \"SAR\", \"SKO\", \"STR\", \"TRE\"), each = 2),     Forest_Type = rep(c(\"CC\", \"NN\"), times = 12)) %>% dplyr::mutate(Plot_ID = paste(Site_ID,     Forest_Type, sep = \"_\")): could not find function \"%>%\"  # Validate the dataset against the naming convention validate_naming_convention(df1, EcoForest_naming) #> Error: object 'df1' not found  # Example of how to create a naming convention tibble manually: EcoForest_naming <- tibble(   name = c(\"Site_ID\", \"Forest_Type\", \"Plot_ID\", \"Plot_Nr\", \"Sub_plot\", \"Sub_plot_FULL\", \"Year\", \"Date\"),   mandatory = c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE),   valid_values = list(     c(\"SKO\", \"GUL\", \"HEM\", \"BRA\", \"SAR\", \"OYT\", \"TRE\", \"HAL\", \"BLA\", \"STR\", \"MRK\", \"LAN\"), #Valid values for Site_ID     c(\"CC\", \"NN\"), #Valid value for Forest_Type     c(\"SKO_CC\", \"GUL_CC\", \"HEM_CC\", \"BRA_CC\", \"SAR_CC\", \"OYT_CC\", \"TRE_CC\", \"HAL_CC\", \"BLA_CC\", \"STR_CC\", \"MRK_CC\", \"LAN_CC\", \"SKO_NN\",\"GUL_NN\", \"HEM_NN\", \"BRA_NN\", \"SAR_NN\", \"OYT_NN\", \"TRE_NN\", \"HAL_NN\", \"BLA_NN\", \"STR_NN\", \"MRK_NN\", \"LAN_NN\"), #Valid values for Plot_ID     NULL, NULL, NULL, NULL, NULL   ),   default_description = c(     \"Three-letter abbreviation of site names\",     \"Forest Management Category (NN = near natural; CC = previous clearcut)\",     \"Plot name composed of Site_ID and Forest_Type\",     \"Number of each plot (e.g., Site_ID×Forest_Type; 1-24)\",     \"Unique number of sub-plot (1-144)\",     \"Combination of Plot_ID and Sub_plot (e.g., SKO_NN_1)\",     \"Year in YYYY format\",     \"Date in YYYY-MM-DD format\"   ),comment=rep(\"\", 8) ) #> Error in tibble(name = c(\"Site_ID\", \"Forest_Type\", \"Plot_ID\", \"Plot_Nr\",     \"Sub_plot\", \"Sub_plot_FULL\", \"Year\", \"Date\"), mandatory = c(TRUE,     TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE), valid_values = list(c(\"SKO\",     \"GUL\", \"HEM\", \"BRA\", \"SAR\", \"OYT\", \"TRE\", \"HAL\", \"BLA\", \"STR\",     \"MRK\", \"LAN\"), c(\"CC\", \"NN\"), c(\"SKO_CC\", \"GUL_CC\", \"HEM_CC\",     \"BRA_CC\", \"SAR_CC\", \"OYT_CC\", \"TRE_CC\", \"HAL_CC\", \"BLA_CC\",     \"STR_CC\", \"MRK_CC\", \"LAN_CC\", \"SKO_NN\", \"GUL_NN\", \"HEM_NN\",     \"BRA_NN\", \"SAR_NN\", \"OYT_NN\", \"TRE_NN\", \"HAL_NN\", \"BLA_NN\",     \"STR_NN\", \"MRK_NN\", \"LAN_NN\"), NULL, NULL, NULL, NULL, NULL),     default_description = c(\"Three-letter abbreviation of site names\",         \"Forest Management Category (NN = near natural; CC = previous clearcut)\",         \"Plot name composed of Site_ID and Forest_Type\", \"Number of each plot (e.g., Site_ID×Forest_Type; 1-24)\",         \"Unique number of sub-plot (1-144)\", \"Combination of Plot_ID and Sub_plot (e.g., SKO_NN_1)\",         \"Year in YYYY format\", \"Date in YYYY-MM-DD format\"),     comment = rep(\"\", 8)): could not find function \"tibble\""},{"path":"/reference/add_desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Add description attributes to data frame columns — add_desc","title":"Add description attributes to data frame columns — add_desc","text":"Adds \"description\" attribute specified columns. description contains square brackets (e.g., \"Length [cm]\"), content inside brackets stored \"unit\" attribute.","code":""},{"path":"/reference/add_desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add description attributes to data frame columns — add_desc","text":"","code":"add_desc(.data, ...)"},{"path":"/reference/add_desc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add description attributes to data frame columns — add_desc","text":".data data frame. ... Named arguments names column names values description strings.","code":""},{"path":"/reference/add_desc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add description attributes to data frame columns — add_desc","text":"modified data frame description (possibly unit) attributes.","code":""},{"path":"/reference/add_desc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add description attributes to data frame columns — add_desc","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) df <- iris %>%   add_desc(Sepal.Length = \"Sepal length\", Sepal.Width = \"Sepal width [cm]\")  str(df) } # }"},{"path":"/reference/add_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Add unit attributes to data frame columns — add_unit","title":"Add unit attributes to data frame columns — add_unit","text":"function allows add \"unit\" attributes specified columns data frame. designed work tidyverse can used pipe (%>%) operator.","code":""},{"path":"/reference/add_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add unit attributes to data frame columns — add_unit","text":"","code":"add_unit(.data, ...)"},{"path":"/reference/add_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add unit attributes to data frame columns — add_unit","text":".data data frame. ... Named arguments names column names values unit strings.","code":""},{"path":"/reference/add_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add unit attributes to data frame columns — add_unit","text":"modified data frame unit attributes added specified columns.","code":""},{"path":"/reference/add_unit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add unit attributes to data frame columns — add_unit","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) df <- iris %>%   add_unit(Sepal.Length = \"cm\", Sepal.Width = \"cm\")  str(df) } # }"},{"path":"/reference/create_metadata_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a metadata flextable for a dataset — create_metadata_table","title":"Create a metadata flextable for a dataset — create_metadata_table","text":"Builds formatted metadata table summarizing structure content dataset. table includes variable names, types, units, descriptions, summary statistics. designed render well HTML using flextable package.","code":""},{"path":"/reference/create_metadata_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a metadata flextable for a dataset — create_metadata_table","text":"","code":"create_metadata_table(df, fontname = NULL, fontsize = NULL)"},{"path":"/reference/create_metadata_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a metadata flextable for a dataset — create_metadata_table","text":"df data.frame optional metadata attributes. fontname Optional font name apply entire table. fontsize Optional font size apply entire table.","code":""},{"path":"/reference/create_metadata_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a metadata flextable for a dataset — create_metadata_table","text":"flextable object summarizing dataset.","code":""},{"path":"/reference/create_metadata_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a metadata flextable for a dataset — create_metadata_table","text":"dataset can include metadata attributes: \"description\" attribute dataset \"description\" \"unit\" attributes individual columns function assumes variable descriptions units added attributes using add_desc() add_unit(), dataset-level descriptions set using base::attr().","code":""},{"path":[]},{"path":"/reference/create_metadata_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a metadata flextable for a dataset — create_metadata_table","text":"Metadata dataset df1 famous (Fisher's Anderson's) iris data set gives measurements centimeters variables sepal length width petal length width, respectively, 50 flowers 3 species iris. species Iris setosa, versicolor, virginica. Summary shows: numeric = mean ± SD (min–max) NA count; factor = levels; character = unique count. 150 observations 5 variables Variable Type Unit Summary Description Sepal.Length numeric cm 5.84 ± 0.83 (4.30–7.90), NA: 0 Sepal length Sepal.Width numeric cm 3.06 ± 0.44 (2.00–4.40), NA: 0 Sepal width Petal.Length numeric cm 3.76 ± 1.77 (1.00–6.90), NA: 0 Petal.Length Petal.Width numeric cm 1.20 ± 0.76 (0.10–2.50), NA: 0 Petal.Width Species factor  setosa, versicolor, virginica Four Iris species","code":"# Load required packages library(flextable) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # Create dataset and define descriptions and units for variables df1 <- iris %>%   add_desc(Sepal.Length = \"Sepal length [cm]\",  # units in square brackets are stored as unit attributes            Sepal.Width  = \"Sepal width\",        # unit can be added separately            Petal.Length = \"Petal.Length [cm]\",            Petal.Width  = \"Petal.Width [cm]\",            Species      = \"Four Iris species\") %>%   add_unit(Sepal.Width = \"cm\")  # add unit if not set by add_desc  # Add dataset-level description attr(df1, \"description\") <- \"This famous (Fisher's or Anderson's) iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.\"  # Create metadata table ft <- create_metadata_table(df1) ft .cl-975be83a{table-layout:auto;}.cl-97553cec{font-family:'DejaVu Sans';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-97553cf6{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-97582538{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-9758254c{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-975843f6{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-975843f7{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-97584400{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9758440a{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9758440b{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9758440c{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-97584414{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-97584415{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-97584416{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9758441e{background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9758441f{background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-97584420{background-color:transparent;vertical-align: top;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-97584428{background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-97584429{background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-97584432{background-color:transparent;vertical-align: top;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Metadata for dataset df1This famous (Fisher's or Anderson's) iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica. Summary shows: numeric = mean ± SD (min–max) with NA count; factor = levels; character = unique count. 150 observations of 5 variablesVariableTypeUnitSummaryDescriptionSepal.Lengthnumericcm5.84 ± 0.83 (4.30–7.90), NA: 0Sepal lengthSepal.Widthnumericcm3.06 ± 0.44 (2.00–4.40), NA: 0Sepal widthPetal.Lengthnumericcm3.76 ± 1.77 (1.00–6.90), NA: 0Petal.LengthPetal.Widthnumericcm1.20 ± 0.76 (0.10–2.50), NA: 0Petal.WidthSpeciesfactorsetosa, versicolor, virginicaFour Iris species # Save table as HTML flextable::save_as_html(ft, path = \"df1_metadata.html\")"},{"path":"/reference/create_readme.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a plain-text README for one or more datasets — create_readme","title":"Create a plain-text README for one or more datasets — create_readme","text":"Generates structured README.txt file documenting one datasets, including general information, methodology, variable descriptions, metadata. format follows example given https://site.uit./dataverseno/deposit/prepare/#--describe--data.","code":""},{"path":"/reference/create_readme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a plain-text README for one or more datasets — create_readme","text":"","code":"create_readme(   ...,   file_path = \"00_README.txt\",   title = \"\",   doi = \"\",   contact_name = getOption(\"metadataTools.contact_name\", \"\"),   contact_institution = getOption(\"metadataTools.contact_institution\", \"\"),   contact_email = getOption(\"metadataTools.contact_email\", \"\"),   contact_orcid = getOption(\"metadataTools.contact_orcid\", \"\"),   dataset_description = \"\",   methodology = \"\",   datasets = NULL )"},{"path":"/reference/create_readme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a plain-text README for one or more datasets — create_readme","text":"file_path Output file path (default \"00_README.txt\"). title Title dataset. doi DOI identifier. contact_name, contact_institution, contact_email, contact_orcid Contact person info. Defaults come R options metadataTools.* supplied. dataset_description paragraph describing dataset. methodology Brief description data collection methods. datasets named list data.frames. may also pass single data.frame first argument convenience.","code":""},{"path":"/reference/create_readme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a plain-text README for one or more datasets — create_readme","text":"Invisibly returns file_path.","code":""},{"path":"/reference/create_readme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a plain-text README for one or more datasets — create_readme","text":"Default contact information (name, institution, email, ORCID) can set using set_metadata_defaults(), stores values R options. defaults used corresponding arguments explicitly provided. function assumes variable descriptions units added attributes using add_desc() add_unit(), dataset-level descriptions set using base::attr(). attributes present, README file still created, descriptions can added manually generated text file. datasets argument explicitly include filename, function use name dataset .csv extension default filename.","code":""},{"path":[]},{"path":"/reference/create_readme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a plain-text README for one or more datasets — create_readme","text":"","code":"# Load required package library(dplyr)  # Create dataset and define descriptions and units for variables df1 <- iris %>%   add_desc(Sepal.Length = \"Sepal length [cm]\",  # units in square brackets are stored as unit attributes            Sepal.Width = \"Sepal width\",         # unit can be added separately            Petal.Length = \"Petal.Length [cm]\",            Petal.Width = \"Petal.Width [cm]\",            Species = \"Four Iris species\") %>%   add_unit(Sepal.Width = \"cm\")  # add unit if not set by add_desc  # Add dataset-level description attr(df1, \"description\") <- \"This famous (Fisher's or Anderson's) iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.\"  # Create a second dataset df2 <- df1 %>%   mutate(SepalLtoW = Sepal.Length / Sepal.Width) %>%   add_desc(SepalLtoW = \"Sepal length relative to its Width [cm/cm]\") %>%   select(SepalLtoW, Species)  attr(df2, \"description\") <- \"Sepal length relative to width of four Iris species from the Fisher's dataset\"  # Set default contact info (optional) set_metadata_defaults(contact_name = \"Navn Navnesen\",                       contact_institution = \"NMBU\",                       contact_email = \"navn.navnesen@nmbu.no\",                       contact_orcid = \"0000-0000-0000-0000\") #> Metadata defaults saved to .Rprofile and will persist across sessions.  # Generate README using defaults create_readme(df1, df2)  # Generate README with full metadata create_readme(   file_path = \"00_README.txt\",   title = \"Iris Flower Measurements\",   doi = \"10.1234/example.doi\",   contact_name = \"Navn Navnesen\",   contact_institution = \"NMBU\",   contact_email = \"navn.navnesen@nmbu.no\",   contact_orcid = \"0000-0000-0000-0000\",   dataset_description = \"These datasets contain measurements of iris flowers collected by Edgar Anderson and used by R.A. Fisher.\",   methodology = \"Measurements were taken manually for sepal and petal dimensions across three iris species.\",   datasets = list(\"df1.csv\" = df1, \"df2.xlsx\" = df2) )"},{"path":"/reference/set_metadata_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Set default metadata contact information — set_metadata_defaults","title":"Set default metadata contact information — set_metadata_defaults","text":"Stores default contact fields R options repeat . Values can retrieved getOption() shipped package. persistent = TRUE, defaults also written user's .Rprofile persist across R sessions.","code":""},{"path":"/reference/set_metadata_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set default metadata contact information — set_metadata_defaults","text":"","code":"set_metadata_defaults(   contact_name = NULL,   contact_institution = NULL,   contact_email = NULL,   contact_orcid = NULL,   persistent = TRUE )"},{"path":"/reference/set_metadata_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set default metadata contact information — set_metadata_defaults","text":"contact_name, contact_institution, contact_email, contact_orcid Character scalars details. Use NULL leave unchanged. persistent Logical. TRUE, saves defaults .Rprofile.","code":""},{"path":"/reference/set_metadata_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set default metadata contact information — set_metadata_defaults","text":"Invisibly returns named list options set.","code":""},{"path":"/reference/set_metadata_defaults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set default metadata contact information — set_metadata_defaults","text":"","code":"set_metadata_defaults(contact_name = \"FirstName LastName\",                       contact_institution = \"NMBU\",                       contact_email = \"name@nmbu.no\",                       contact_orcid = \"0000-0000-0000-0000\") #> Metadata defaults saved to .Rprofile and will persist across sessions."},{"path":"/reference/validate_naming_convention.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate and annotate a dataset using a naming convention — validate_naming_convention","title":"Validate and annotate a dataset using a naming convention — validate_naming_convention","text":"Adds description attributes columns checks missing mandatory variables invalid values.","code":""},{"path":"/reference/validate_naming_convention.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate and annotate a dataset using a naming convention — validate_naming_convention","text":"","code":"validate_naming_convention(df, naming_object)"},{"path":"/reference/validate_naming_convention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate and annotate a dataset using a naming convention — validate_naming_convention","text":"df data frame validate. naming_object tibble columns: name (character): column name df mandatory (logical): whether column required valid_values (list-column): allowed values variable (NULL check) default_description (character): description store column attribute","code":""},{"path":"/reference/validate_naming_convention.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate and annotate a dataset using a naming convention — validate_naming_convention","text":"annotated data frame (invisibly).","code":""},{"path":"/reference/validate_naming_convention.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate and annotate a dataset using a naming convention — validate_naming_convention","text":"","code":"df1 <- data.frame(   Site_ID = rep(c(\"BLA\", \"BRA\", \"GUL\", \"HAL\", \"HEM\", \"LAN\", \"MRK\", \"OYT\", \"SAR\", \"SKO\", \"STR\", \"TRE\"), each = 2),   Forest_Type = rep(c(\"CC\", \"NN\"), times = 12)) %>%    mutate(Plot_ID = paste(Site_ID, Forest_Type, sep = \"_\"))  df1 <- validate_naming_convention(df1, EcoForest_naming) #> ✅ All mandatory variables are present and valid. Descriptions added. attributes(df1$Site_ID)$description #> [1] \"Three-letter abbreviation of site names\""},{"path":"/reference/view_naming_convention.html","id":null,"dir":"Reference","previous_headings":"","what":"View a naming convention in a readable table — view_naming_convention","title":"View a naming convention in a readable table — view_naming_convention","text":"Displays naming convention tibble using flextable formatting.","code":""},{"path":"/reference/view_naming_convention.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a naming convention in a readable table — view_naming_convention","text":"","code":"view_naming_convention(naming_object)"},{"path":"/reference/view_naming_convention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View a naming convention in a readable table — view_naming_convention","text":"naming_object tibble columns: name, mandatory, valid_values, default_description","code":""},{"path":"/reference/view_naming_convention.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a naming convention in a readable table — view_naming_convention","text":"flextable object","code":""},{"path":"/reference/view_naming_convention.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a naming convention in a readable table — view_naming_convention","text":"name mandatory valid_values default_description comment Site_ID Yes SKO, GUL, HEM, BRA, SAR, OYT, TRE, HAL, BLA, STR, MRK, LAN Three-letter abbreviation site names  Forest_Type Yes CC, NN Forest Management Category (NN = near natural; CC = previous clearcut)  Plot_ID Yes SKO_CC, GUL_CC, HEM_CC, BRA_CC, SAR_CC, OYT_CC, TRE_CC, HAL_CC, BLA_CC, STR_CC, MRK_CC, LAN_CC, SKO_NN, GUL_NN, HEM_NN, BRA_NN, SAR_NN, OYT_NN, TRE_NN, HAL_NN, BLA_NN, STR_NN, MRK_NN, LAN_NN Plot name composed Site_ID Forest_Type  Plot_Nr  Number plot (e.g., Site_ID×Forest_Type; 1-24)  Sub_plot  Unique number sub-plot (1-144)  Sub_plot_FULL  Combination Plot_ID Sub_plot (e.g., SKO_NN_1)  Year  Year YYYY format  Date  Date YYYY-MM-DD format","code":"view_naming_convention(EcoForest_naming) .cl-98340184{table-layout:auto;}.cl-982d78aa{font-family:'DejaVu Sans';font-size:8pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-98308608{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-9830a12e{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9830a138{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9830a139{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9830a142{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9830a14c{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9830a156{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}namemandatoryvalid_valuesdefault_descriptioncommentSite_IDYesSKO, GUL, HEM, BRA, SAR, OYT, TRE, HAL, BLA, STR, MRK, LANThree-letter abbreviation of site namesForest_TypeYesCC, NNForest Management Category (NN = near natural; CC = previous clearcut)Plot_IDYesSKO_CC, GUL_CC, HEM_CC, BRA_CC, SAR_CC, OYT_CC, TRE_CC, HAL_CC, BLA_CC, STR_CC, MRK_CC, LAN_CC, SKO_NN, GUL_NN, HEM_NN, BRA_NN, SAR_NN, OYT_NN, TRE_NN, HAL_NN, BLA_NN, STR_NN, MRK_NN, LAN_NNPlot name composed of Site_ID and Forest_TypePlot_NrNoNumber of each plot (e.g., Site_ID×Forest_Type; 1-24)Sub_plotNoUnique number of sub-plot (1-144)Sub_plot_FULLNoCombination of Plot_ID and Sub_plot (e.g., SKO_NN_1)YearNoYear in YYYY formatDateNoDate in YYYY-MM-DD format"}]
